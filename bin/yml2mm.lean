#!/usr/bin/perl
use 5.010;
use strict;
use warnings;
use autodie;
use Getopt::Std;
use YAML qw(LoadFile);
use FindBin qw($Bin);

# YAML to ModuleManager converter
# CC-BY Paul Fenwick, 2014
# May also be used under the same terms as Perl itself.

# Don't have Perl? Try strawberry!
# http://strawberryperl.com/

# Editing this file? Make changes to the `yml2mm.lean` version, and
# compile the portable version with `fatten yml2mm.lean yml2mm`

my $DECORATION = "AFTER[RealismOverhaul]";

# Allow output file to be set.
my %opts = (o => "$Bin/../GameData/RP-0/Tree.cfg");
getopts('o:', \%opts);

warn "Writing output to $opts{o}\n";

if (@ARGV == 0) { @ARGV = "$Bin/../tree.yml" }

open(my $out_fh, ">", $opts{o});

say {$out_fh}
    "// THIS FILE IS AUTOMATICALLY GENERATED\n".
    "// DO NOT WRITE TO THIS FILE DIRECTLY\n".
    "// YOUR CHANGES WILL BE OVER-WRITTEN!\n".
    "// \n".
    "// Please edit `tree.yml` and then run `yml2mm` to regenerate\n"
;

foreach my $file (@ARGV) {
    my $yaml = LoadFile($file);

    foreach my $tech (keys %$yaml) {
        foreach my $part (keys %{ $yaml->{$tech}} ) {
            my $changes = "\t%TechRequired = $tech\n";

            my $custom_fields = $yaml->{$tech}{$part};

            # If there are changes listed for this part, copy them across.
            foreach my $field (keys %$custom_fields) {
                $changes .= "\t%$field = $custom_fields->{$field}\n";
            }

            say {$out_fh} "\@PART[$part]:$DECORATION\n{\n$changes}";
        }
    }
}
